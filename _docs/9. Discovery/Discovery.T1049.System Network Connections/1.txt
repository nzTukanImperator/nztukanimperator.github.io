---
title: "T1049.System Network Connections"
folder: "09. Discovery"
---





#include <windows.h>
#include <fstream>
#include <iostream>
#include <iphlpapi.h>
#pragma comment(lib, "iphlpapi.lib")

void RunSystemInfoInBackground1() {
    std::ofstream outputFile("netstatR.txt");
    const char* command = "netstat -r";

    SECURITY_ATTRIBUTES saAttr;
    saAttr.nLength = sizeof(SECURITY_ATTRIBUTES);
    saAttr.bInheritHandle = TRUE;
    saAttr.lpSecurityDescriptor = NULL;

    HANDLE hReadPipe, hWritePipe;
    if (!CreatePipe(&hReadPipe, &hWritePipe, &saAttr, 0)) { outputFile.close(); return; }

    STARTUPINFOA si = {};
    si.cb = sizeof(STARTUPINFOA);
    si.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
    si.wShowWindow = SW_HIDE;
    si.hStdError = hWritePipe;
    si.hStdOutput = hWritePipe;

    PROCESS_INFORMATION pi;

    if (!CreateProcessA(NULL, const_cast<LPSTR>(command), NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)) { outputFile.close(); return; }

    CloseHandle(hWritePipe);

    const int BUFFER_SIZE = 4096;
    char buffer[BUFFER_SIZE];
    DWORD bytesRead;

    while (ReadFile(hReadPipe, buffer, BUFFER_SIZE, &bytesRead, NULL) && bytesRead > 0) {
        std::string data(buffer, bytesRead);
        size_t pos = 0;

        while ((pos = data.find("\n", pos)) != std::string::npos) {
            data.erase(pos, 1);
        }

        outputFile.write(data.c_str(), data.size());
    }

    WaitForSingleObject(pi.hProcess, INFINITE);
    CloseHandle(pi.hThread);
    CloseHandle(pi.hProcess);
    outputFile.close();
}
void RunSystemInfoInBackground2() {
    std::ofstream outputFile("netstataANO.txt");
    const char* command = "netstat -ano";

    SECURITY_ATTRIBUTES saAttr;
    saAttr.nLength = sizeof(SECURITY_ATTRIBUTES);
    saAttr.bInheritHandle = TRUE;
    saAttr.lpSecurityDescriptor = NULL;

    HANDLE hReadPipe, hWritePipe;
    if (!CreatePipe(&hReadPipe, &hWritePipe, &saAttr, 0)) { outputFile.close(); return; }

    STARTUPINFOA si = {};
    si.cb = sizeof(STARTUPINFOA);
    si.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
    si.wShowWindow = SW_HIDE;
    si.hStdError = hWritePipe;
    si.hStdOutput = hWritePipe;

    PROCESS_INFORMATION pi;

    if (!CreateProcessA(NULL, const_cast<LPSTR>(command), NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)) { outputFile.close(); return; }

    CloseHandle(hWritePipe);

    const int BUFFER_SIZE = 4096;
    char buffer[BUFFER_SIZE];
    DWORD bytesRead;

    while (ReadFile(hReadPipe, buffer, BUFFER_SIZE, &bytesRead, NULL) && bytesRead > 0) {
        std::string data(buffer, bytesRead);
        size_t pos = 0;

        while ((pos = data.find("\n", pos)) != std::string::npos) {
            data.erase(pos, 1);
        }

        outputFile.write(data.c_str(), data.size());
    }

    WaitForSingleObject(pi.hProcess, INFINITE);
    CloseHandle(pi.hThread);
    CloseHandle(pi.hProcess);
    outputFile.close();
}
void RunSystemInfoInBackground3() {
    std::ofstream outputFile("netUSE.txt");
    const char* command = "net use";

    SECURITY_ATTRIBUTES saAttr;
    saAttr.nLength = sizeof(SECURITY_ATTRIBUTES);
    saAttr.bInheritHandle = TRUE;
    saAttr.lpSecurityDescriptor = NULL;

    HANDLE hReadPipe, hWritePipe;
    if (!CreatePipe(&hReadPipe, &hWritePipe, &saAttr, 0)) { outputFile.close(); return; }

    STARTUPINFOA si = {};
    si.cb = sizeof(STARTUPINFOA);
    si.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
    si.wShowWindow = SW_HIDE;
    si.hStdError = hWritePipe;
    si.hStdOutput = hWritePipe;

    PROCESS_INFORMATION pi;

    if (!CreateProcessA(NULL, const_cast<LPSTR>(command), NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)) { outputFile.close(); return; }

    CloseHandle(hWritePipe);

    const int BUFFER_SIZE = 4096;
    char buffer[BUFFER_SIZE];
    DWORD bytesRead;

    while (ReadFile(hReadPipe, buffer, BUFFER_SIZE, &bytesRead, NULL) && bytesRead > 0) {
        std::string data(buffer, bytesRead);
        size_t pos = 0;

        while ((pos = data.find("\n", pos)) != std::string::npos) {
            data.erase(pos, 1);
        }

        outputFile.write(data.c_str(), data.size());
    }

    WaitForSingleObject(pi.hProcess, INFINITE);
    CloseHandle(pi.hThread);
    CloseHandle(pi.hProcess);
    outputFile.close();
}
void SaveIpNetTableToFile(const std::string& filename) {
    DWORD dwSize = 0;
    if (GetIpNetTable(NULL, &dwSize, FALSE) != ERROR_INSUFFICIENT_BUFFER) {
        std::cerr << "Failed to get IP net table size." << std::endl;
        return;
    }
    PMIB_IPNETTABLE pIpNetTable = (PMIB_IPNETTABLE)malloc(dwSize);
    if (pIpNetTable == NULL) {
        std::cerr << "Failed to allocate memory for IP net table." << std::endl;
        return;
    }
    if (GetIpNetTable(pIpNetTable, &dwSize, FALSE) != NO_ERROR) {
        std::cerr << "Failed to get IP net table." << std::endl;
        free(pIpNetTable);
        return;
    }
    std::ofstream outputFile(filename);
    if (!outputFile.is_open()) {
        std::cerr << "Failed to open file for writing." << std::endl;
        free(pIpNetTable);
        return;
    }
    for (DWORD i = 0; i < pIpNetTable->dwNumEntries; ++i) {
        DWORD ipAddress = pIpNetTable->table[i].dwAddr;
        BYTE* macAddress = pIpNetTable->table[i].bPhysAddr;
        DWORD macAddressLength = pIpNetTable->table[i].dwPhysAddrLen;

        outputFile << "IP Address: " << ((ipAddress >> 24) & 0xFF) << "." << ((ipAddress >> 16) & 0xFF) << "."
            << ((ipAddress >> 8) & 0xFF) << "." << (ipAddress & 0xFF) << std::endl;
        outputFile << "MAC Address: ";
        for (DWORD j = 0; j < macAddressLength; ++j) {
            if (j > 0) outputFile << ":";
            outputFile << std::hex << std::uppercase << static_cast<int>(macAddress[j]);
        }
        outputFile << std::endl << std::endl;
    }
    outputFile.close();
    free(pIpNetTable);
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {

    RunSystemInfoInBackground1();
    RunSystemInfoInBackground2();
    RunSystemInfoInBackground3();
    std::string filename = "ip_net_table.txt";
    SaveIpNetTableToFile(filename);
    return 0;
}