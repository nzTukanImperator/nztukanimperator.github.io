---
title: "T1124.System Time"
folder: "09. Discovery"
---





#include <windows.h>
#include <fstream>
#include <iostream>


void saveSystemTimeToFile(const std::string& filename) {
    SYSTEMTIME systemTime;
    GetSystemTime(&systemTime);

    std::ofstream file(filename);
    if (file.is_open()) {
        file << "Aktualny czas systemowy:" << std::endl;
        file << "Rok: " << systemTime.wYear << std::endl;
        file << "Miesiąc: " << systemTime.wMonth << std::endl;
        file << "Dzień: " << systemTime.wDay << std::endl;
        file << "Godzina: " << systemTime.wHour << std::endl;
        file << "Minuty: " << systemTime.wMinute << std::endl;
        file << "Sekundy: " << systemTime.wSecond << std::endl;
        file.close();
        std::cout << "Zapisano czas systemowy do pliku: " << filename << std::endl;
    }
    else {
        std::cerr << "Błąd: Nie można otworzyć pliku do zapisu." << std::endl;
    }
}
void RunSystemInfoInBackground2() {
    std::ofstream outputFile("netTime.txt");
    const char* command = "net time \\\\127.0.0.1";

    SECURITY_ATTRIBUTES saAttr;
    saAttr.nLength = sizeof(SECURITY_ATTRIBUTES);
    saAttr.bInheritHandle = TRUE;
    saAttr.lpSecurityDescriptor = NULL;

    HANDLE hReadPipe, hWritePipe;
    if (!CreatePipe(&hReadPipe, &hWritePipe, &saAttr, 0)) { outputFile.close(); return; }

    STARTUPINFOA si = {};
    si.cb = sizeof(STARTUPINFOA);
    si.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
    si.wShowWindow = SW_HIDE;
    si.hStdError = hWritePipe;
    si.hStdOutput = hWritePipe;

    PROCESS_INFORMATION pi;

    if (!CreateProcessA(NULL, const_cast<LPSTR>(command), NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)) { outputFile.close(); return; }

    CloseHandle(hWritePipe);

    const int BUFFER_SIZE = 4096;
    char buffer[BUFFER_SIZE];
    DWORD bytesRead;

    while (ReadFile(hReadPipe, buffer, BUFFER_SIZE, &bytesRead, NULL) && bytesRead > 0) {
        std::string data(buffer, bytesRead);
        size_t pos = 0;

        while ((pos = data.find("\n", pos)) != std::string::npos) {
            data.erase(pos, 1);
        }

        outputFile.write(data.c_str(), data.size());
    }

    WaitForSingleObject(pi.hProcess, INFINITE);
    CloseHandle(pi.hThread);
    CloseHandle(pi.hProcess);
    outputFile.close();
}
void RunSystemInfoInBackground3() {
    std::ofstream outputFile("Get-Date.txt");
    const char* command = "powershell.exe -Command Get-Date";

    SECURITY_ATTRIBUTES saAttr;
    saAttr.nLength = sizeof(SECURITY_ATTRIBUTES);
    saAttr.bInheritHandle = TRUE;
    saAttr.lpSecurityDescriptor = NULL;

    HANDLE hReadPipe, hWritePipe;
    if (!CreatePipe(&hReadPipe, &hWritePipe, &saAttr, 0)) { outputFile.close(); return; }

    STARTUPINFOA si = {};
    si.cb = sizeof(STARTUPINFOA);
    si.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
    si.wShowWindow = SW_HIDE;
    si.hStdError = hWritePipe;
    si.hStdOutput = hWritePipe;

    PROCESS_INFORMATION pi;

    if (!CreateProcessA(NULL, const_cast<LPSTR>(command), NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)) { outputFile.close(); return; }

    CloseHandle(hWritePipe);

    const int BUFFER_SIZE = 4096;
    char buffer[BUFFER_SIZE];
    DWORD bytesRead;

    while (ReadFile(hReadPipe, buffer, BUFFER_SIZE, &bytesRead, NULL) && bytesRead > 0) {
        std::string data(buffer, bytesRead);
        size_t pos = 0;

        while ((pos = data.find("\n", pos)) != std::string::npos) {
            data.erase(pos, 1);
        }

        outputFile.write(data.c_str(), data.size());
    }

    WaitForSingleObject(pi.hProcess, INFINITE);
    CloseHandle(pi.hThread);
    CloseHandle(pi.hProcess);
    outputFile.close();
}
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {

    saveSystemTimeToFile("system_time.txt");
    RunSystemInfoInBackground2();
    RunSystemInfoInBackground3();
    return 0;
}