---
title: "T1652.Device Driver"
folder: "09. Discovery"
---





#include <windows.h>
#include <psapi.h>
#include <fstream>
#include <iostream>
#include <locale>
#include <codecvt>

void RunSystemInfoInBackground() {
    std::ofstream outputFile("cmddriver.txt");
    const char* command = "cmd /c driverquery";

    SECURITY_ATTRIBUTES saAttr;
    saAttr.nLength = sizeof(SECURITY_ATTRIBUTES);
    saAttr.bInheritHandle = TRUE;
    saAttr.lpSecurityDescriptor = NULL;

    HANDLE hReadPipe, hWritePipe;
    if (!CreatePipe(&hReadPipe, &hWritePipe, &saAttr, 0)) { outputFile.close(); return; }

    STARTUPINFOA si = {};
    si.cb = sizeof(STARTUPINFOA);
    si.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
    si.wShowWindow = SW_HIDE;
    si.hStdError = hWritePipe;
    si.hStdOutput = hWritePipe;

    PROCESS_INFORMATION pi;

    if (!CreateProcessA(NULL, const_cast<LPSTR>(command), NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)) { outputFile.close(); return; }

    CloseHandle(hWritePipe);

    const int BUFFER_SIZE = 4096;
    char buffer[BUFFER_SIZE];
    DWORD bytesRead;

    while (ReadFile(hReadPipe, buffer, BUFFER_SIZE, &bytesRead, NULL) && bytesRead > 0) {
        std::string data(buffer, bytesRead);
        size_t pos = 0;

        while ((pos = data.find("\n", pos)) != std::string::npos) {
            data.erase(pos, 1);
        }

        outputFile.write(data.c_str(), data.size());
    }

    WaitForSingleObject(pi.hProcess, INFINITE);
    CloseHandle(pi.hThread);
    CloseHandle(pi.hProcess);
    outputFile.close();
}

void AutorunRegistryBackground4() {
    std::ofstream outputFile("APIDeviceDriversList.txt");
    if (!outputFile.is_open()) {
        std::cerr << "Nie można otworzyć pliku do zapisu." << std::endl;
        return;
    }

    DWORD cbNeeded;
    LPVOID drivers[1024];
    if (!EnumDeviceDrivers(drivers, sizeof(drivers), &cbNeeded)) {
        std::cerr << "EnumDeviceDrivers() nie powiodło się." << std::endl;
        return;
    }

    DWORD numDrivers = cbNeeded / sizeof(drivers[0]);
    TCHAR driverPath[MAX_PATH];
    outputFile << "Lista sterowników urządzeń:" << std::endl;
    for (DWORD i = 0; i < numDrivers; ++i) {
        if (GetDeviceDriverFileName(drivers[i], driverPath, sizeof(driverPath) / sizeof(driverPath[0]))) {
            std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;
            std::string driverName = converter.to_bytes(std::wstring(driverPath));
            outputFile << driverName << std::endl;
        }
        else {
            outputFile << "Błąd podczas pobierania nazwy sterownika" << std::endl;
        }
    }

    outputFile.close();
    std::cout << "Lista sterowników urządzeń została zapisana do pliku DeviceDriversList.txt" << std::endl;
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {

    RunSystemInfoInBackground();
    AutorunRegistryBackground4();
    return 0;
}