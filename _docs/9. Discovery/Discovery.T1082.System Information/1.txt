---
title: "T1082.System Information"
folder: "09. Discovery"
---





#include <windows.h>
#include <fstream>
#include <iostream>


void RunSystemInfoInBackground() {
    std::ofstream outputFile("ver.txt");
    const char* command = "cmd /c ver";

    SECURITY_ATTRIBUTES saAttr;
    saAttr.nLength = sizeof(SECURITY_ATTRIBUTES);
    saAttr.bInheritHandle = TRUE;
    saAttr.lpSecurityDescriptor = NULL;

    HANDLE hReadPipe, hWritePipe;
    if (!CreatePipe(&hReadPipe, &hWritePipe, &saAttr, 0)) { outputFile.close(); return; }

    STARTUPINFOA si = {};
    si.cb = sizeof(STARTUPINFOA);
    si.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
    si.wShowWindow = SW_HIDE;
    si.hStdError = hWritePipe;
    si.hStdOutput = hWritePipe;

    PROCESS_INFORMATION pi;

    if (!CreateProcessA(NULL, const_cast<LPSTR>(command), NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)) { outputFile.close(); return; }

    CloseHandle(hWritePipe);

    const int BUFFER_SIZE = 4096;
    char buffer[BUFFER_SIZE];
    DWORD bytesRead;

    while (ReadFile(hReadPipe, buffer, BUFFER_SIZE, &bytesRead, NULL) && bytesRead > 0) {
        std::string data(buffer, bytesRead);
        size_t pos = 0;

        while ((pos = data.find("\n", pos)) != std::string::npos) {
            data.erase(pos, 1);
        }

        outputFile.write(data.c_str(), data.size());
    }

    WaitForSingleObject(pi.hProcess, INFINITE);
    CloseHandle(pi.hThread);
    CloseHandle(pi.hProcess);
    outputFile.close();
}
void RunSystemInfoInBackground1() {
    std::ofstream outputFile("systeminfo.txt");
    const char* command = "systeminfo ";

    SECURITY_ATTRIBUTES saAttr;
    saAttr.nLength = sizeof(SECURITY_ATTRIBUTES);
    saAttr.bInheritHandle = TRUE;
    saAttr.lpSecurityDescriptor = NULL;

    HANDLE hReadPipe, hWritePipe;
    if (!CreatePipe(&hReadPipe, &hWritePipe, &saAttr, 0)) { outputFile.close(); return; }

    STARTUPINFOA si = {};
    si.cb = sizeof(STARTUPINFOA);
    si.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
    si.wShowWindow = SW_HIDE;
    si.hStdError = hWritePipe;
    si.hStdOutput = hWritePipe;

    PROCESS_INFORMATION pi;

    if (!CreateProcessA(NULL, const_cast<LPSTR>(command), NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)) { outputFile.close(); return; }

    CloseHandle(hWritePipe);

    const int BUFFER_SIZE = 4096;
    char buffer[BUFFER_SIZE];
    DWORD bytesRead;

    while (ReadFile(hReadPipe, buffer, BUFFER_SIZE, &bytesRead, NULL) && bytesRead > 0) {
        std::string data(buffer, bytesRead);
        size_t pos = 0;

        while ((pos = data.find("\n", pos)) != std::string::npos) {
            data.erase(pos, 1);
        }

        outputFile.write(data.c_str(), data.size());
    }

    WaitForSingleObject(pi.hProcess, INFINITE);
    CloseHandle(pi.hThread);
    CloseHandle(pi.hProcess);
    outputFile.close();
}
void AutorunRegistryBackground4() {
    DWORD drives = GetLogicalDrives(); 
    char driveLetter = 'A';
    std::ofstream outputFile("drives.txt"); 

    if (outputFile.is_open()) {
        while (drives) {
            if (drives & 1) { 
                std::string drivePath = std::string(1, driveLetter) + ":\\";
                outputFile << drivePath << std::endl; 
            }
            drives >>= 1;
            ++driveLetter;
        }
        outputFile.close();
    }
}
void AutorunRegistryBackground5() {
    SYSTEM_INFO systemInfo;
    GetNativeSystemInfo(&systemInfo); 

    std::ofstream outputFile("system_info.txt"); 

    if (outputFile.is_open()) {
        outputFile << "Processor Architecture: " << systemInfo.wProcessorArchitecture << std::endl;
        outputFile << "Page Size: " << systemInfo.dwPageSize << std::endl;
        outputFile << "Processor Type: " << systemInfo.dwProcessorType << std::endl;
        outputFile << "Number of Processors: " << systemInfo.dwNumberOfProcessors << std::endl;
       
        outputFile.close();
    }
}
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {

    RunSystemInfoInBackground();
    RunSystemInfoInBackground1();
    AutorunRegistryBackground4();
    AutorunRegistryBackground5();
    return 0;
}