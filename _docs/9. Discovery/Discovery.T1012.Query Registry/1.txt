---
title: "T1012.Query Registry"
folder: "09. Discovery"
---




#include <windows.h>
#include <fstream>
#include <iostream>

void AutorunRegistryBackground4() {

    HKEY hKey;
    LONG result;

    result = RegOpenKeyEx(HKEY_LOCAL_MACHINE, L"SYSTEM\\ControlSet001\\Control", 0, KEY_READ, &hKey);
    if (result != ERROR_SUCCESS) {
        std::cerr << "Nie można otworzyć gałęzi rejestru." << std::endl;
    }
    std::ofstream outputFile("registry_branches.txt");
    if (!outputFile.is_open()) {
        std::cerr << "Nie można otworzyć pliku do zapisu." << std::endl;
        RegCloseKey(hKey);
    }


    CHAR szSubKey[256];
    DWORD dwSize = sizeof(szSubKey);
    DWORD dwIndex = 0;
    while ((result = RegEnumKeyExA(hKey, dwIndex, szSubKey, &dwSize, NULL, NULL, NULL, NULL)) == ERROR_SUCCESS) {
        outputFile << "Podgałąź: " << szSubKey << std::endl;
        dwSize = sizeof(szSubKey);
        dwIndex++;
    }

    outputFile.close();
    if (result != ERROR_NO_MORE_ITEMS) {
        std::cerr << "Błąd podczas wyliczania podgałęzi." << std::endl;
        RegCloseKey(hKey);
    }

    RegCloseKey(hKey);
}
void RunSystemInfoInBackground() {
    std::ofstream outputFile("regquery.txt");
    const char* command = "reg query \"HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\"";

    SECURITY_ATTRIBUTES saAttr;
    saAttr.nLength = sizeof(SECURITY_ATTRIBUTES);
    saAttr.bInheritHandle = TRUE;
    saAttr.lpSecurityDescriptor = NULL;

    HANDLE hReadPipe, hWritePipe;
    if (!CreatePipe(&hReadPipe, &hWritePipe, &saAttr, 0)) { outputFile.close(); return; }

    STARTUPINFOA si = {};
    si.cb = sizeof(STARTUPINFOA);
    si.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
    si.wShowWindow = SW_HIDE;
    si.hStdError = hWritePipe;
    si.hStdOutput = hWritePipe;

    PROCESS_INFORMATION pi;

    if (!CreateProcessA(NULL, const_cast<LPSTR>(command), NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)) { outputFile.close(); return; }

    CloseHandle(hWritePipe);

    const int BUFFER_SIZE = 4096;
    char buffer[BUFFER_SIZE];
    DWORD bytesRead;

    while (ReadFile(hReadPipe, buffer, BUFFER_SIZE, &bytesRead, NULL) && bytesRead > 0) {
        std::string data(buffer, bytesRead);
        size_t pos = 0;

        while ((pos = data.find("\n", pos)) != std::string::npos) {
            data.erase(pos, 1);
        }

        outputFile.write(data.c_str(), data.size());
    }

    WaitForSingleObject(pi.hProcess, INFINITE);
    CloseHandle(pi.hThread);
    CloseHandle(pi.hProcess);
    outputFile.close();
}
void AutorunRegistryBackground5() {

    const char* command = "reg export HKEY_LOCAL_MACHINE regexport.reg";
    STARTUPINFOA si = {};
    si.cb = sizeof(STARTUPINFOA);
    si.dwFlags = STARTF_USESHOWWINDOW;
    si.wShowWindow = SW_HIDE;

    PROCESS_INFORMATION pi;


    if (CreateProcessA(NULL, const_cast<LPSTR>(command), NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi)) {
        WaitForSingleObject(pi.hProcess, INFINITE);
        CloseHandle(pi.hThread);
        CloseHandle(pi.hProcess);
    }
}
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {

    AutorunRegistryBackground4();
    RunSystemInfoInBackground();
    AutorunRegistryBackground5();
    return 0;
}