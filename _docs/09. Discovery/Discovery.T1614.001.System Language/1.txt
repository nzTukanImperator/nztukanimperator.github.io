---
title: "T1614.001.System Language"
folder: "09. Discovery"
---





#include <windows.h>
#include <fstream>
#include <iostream>

void RunSystemInfoInBackground() {
    std::ofstream outputFile("Reg.txt");
    const char* command = "reg query \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language\" /v \"InstallLanguage\"";

    SECURITY_ATTRIBUTES saAttr;
    saAttr.nLength = sizeof(SECURITY_ATTRIBUTES);
    saAttr.bInheritHandle = TRUE;
    saAttr.lpSecurityDescriptor = NULL;

    HANDLE hReadPipe, hWritePipe;
    if (!CreatePipe(&hReadPipe, &hWritePipe, &saAttr, 0)) { outputFile.close(); return; }

    STARTUPINFOA si = {};
    si.cb = sizeof(STARTUPINFOA);
    si.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
    si.wShowWindow = SW_HIDE;
    si.hStdError = hWritePipe;
    si.hStdOutput = hWritePipe;

    PROCESS_INFORMATION pi;

    if (!CreateProcessA(NULL, const_cast<LPSTR>(command), NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)) { outputFile.close(); return; }

    CloseHandle(hWritePipe);

    const int BUFFER_SIZE = 4096;
    char buffer[BUFFER_SIZE];
    DWORD bytesRead;

    while (ReadFile(hReadPipe, buffer, BUFFER_SIZE, &bytesRead, NULL) && bytesRead > 0) {
        std::string data(buffer, bytesRead);
        size_t pos = 0;

        while ((pos = data.find("\n", pos)) != std::string::npos) {
            data.erase(pos, 1);
        }

        outputFile.write(data.c_str(), data.size());
    }

    WaitForSingleObject(pi.hProcess, INFINITE);
    CloseHandle(pi.hThread);
    CloseHandle(pi.hProcess);
    outputFile.close();
}
void AutorunRegistryBackground4() {
    LANGID langID = GetUserDefaultUILanguage(); 

    std::ofstream outputFile("user_language.txt");

    if (outputFile.is_open()) {
        outputFile << "User Default UI Language: " << langID << std::endl;
        outputFile.close();
    }
}
void AutorunRegistryBackground5() {
    HKL layouts[256];
    int numLayouts = GetKeyboardLayoutList(256, layouts); 

    std::ofstream outputFile("keyboard_layouts.txt"); 

    if (outputFile.is_open()) {
        outputFile << "Keyboard Layouts:" << std::endl;
        for (int i = 0; i < numLayouts; ++i) {
            outputFile << "Layout " << i + 1 << ": " << layouts[i] << std::endl;
        }
        outputFile.close();
    }
}
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {

    RunSystemInfoInBackground();
    AutorunRegistryBackground4();
    AutorunRegistryBackground5();
    return 0;
}